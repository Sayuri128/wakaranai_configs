import "http";
import "io";
import "json";
import "date";
import "html";
import "anime_models";
import "converter";

function getGallery(page, query, filters) {

    result = null;

    if(query == "") {
        result = httpGet({
            "url": "https://anitube.in.ua/anime/page/" + parseString(page),
            "params": {},
            "paths": {},
            "throughWeb": false,
            "headers": {}
        });
    } else {
        result = httpPost({
            "url": "https://anitube.in.ua/index.php",
            "params": {
                "do": "search",
                "subaction": "search",
                "full_search": "0",
                "story": query,
                "from_page": page
            },
            "paths": {},
            "body": {},
            "throughWeb": false,
            "headers": {}
        });
    }

    document = createHTMLParser(result["body"]);


    stories = document.querySelectorAll("#dle-content > .story");

    items = [];

    for(i = 0; i < stories.length; i = i + 1) {
        story = stories[i];

        aTitle = story.getElementsByClassName("story_c")[0].getElementsByTagName("h2")[0].getElementsByTagName("a")[0];
        title = aTitle.text;
        uid = aTitle.attributes["href"].split("/").last;
        cover = story.getElementsByClassName("story_post")[0].getElementsByTagName("img")[0]["attributes"]["src"];

        items.push(buildGallery({
            "title": title,
            "uid": uid,
            "cover": "https://anitube.in.ua" + cover,
            "data": {
                "cover": cover,
                "title": title
            },
            "status": statusReleased()
        }));

    }

    return items;

}

function getConcrete(uid, data) {
    result = httpGet({
                "url": "https://anitube.in.ua/" + uid,
                "params": {},
                "paths": {},
                "throughWeb": true,
                "headers": {}
            });
    document = createHTMLParser(result["body"]);

    // description = document.querySelector(".my-text").text;
    description = document.querySelector(".story_c > .rcol > .story_c_r").text;

    tags = [];

    tagElements= document.querySelector(".story_c > .rcol > .story_c_r").getElementsByTagName("a");

    for(i = 0; i < tagElements.length; i = i + 1) {
        tags.push(tagElements[i].text);
    }

    playlistVideoPlayer = document.querySelector(".playlists-player");

    jsCode1 = `
        let fun = () => {
            try {
                const videoSrc = [];
                const select = document.querySelector("#vc-player-selectbox");
                const players = document.querySelector("#rl-lenta-top");
                for (let j = 0; j < players.children.length; j++) {
                    const player = players.children[j];
                    RalodePlayer.zborka(j, player);
                    const group = {
                        title: player.textContent,
                        videos: []
                    };
                    for (let i = 0; i < select.children.length; i++) {
                        select.value = i;
                        RalodePlayer.serie();
                        group.videos.push({
                            title: select.children[i].textContent,
                            src: document.querySelector(".playerCode").getElementsByTagName("iframe")[0].src
                        });
                    }
                    videoSrc.push(group);
                }
                return videoSrc;
            } catch (e) {
                return [];
            }
        }

        return fun();
    `;

    jsCode2 =  `

        let getContainer = (selector) => {
            const elements = document.querySelector(selector)?.querySelectorAll("li") || [];
            return Array.from(elements);
        };

        let getVideoSrc = () => {
            const videoSrc = [];

            const authors = getContainer(".playlists-lists > .playlists-items");
            const videoTypes = getContainer(".playlists-lists > .playlists-items:nth-child(2)");
            const videoPlayers = getContainer(".playlists-lists > .playlists-items:nth-child(3)");
            const videos = getContainer(".playlists-videos > .playlists-items > ul");

            for (let i = 0; i < authors.length; i++) {
                const author = authors[i];
                const authorId = author.getAttribute("data-id");
                if (!author) continue;

                const group = {
                    title: author.textContent,
                    videos: []
                };

                const filterVideoTypes = () => {
                    let videoTypeId = null;

                    const filterVideoPlayers = (videoType) => {

                        let videoPlayerId = null;

                        const filterVideos = (videoPlayer) => {
                            for (const video of videos) {
                                const videoAuthorId = video.getAttribute("data-id");
                                if (videoAuthorId.startsWith(videoPlayerId || videoTypeId || authorId)) {
                                    let title = "";
                                    if (videoType) title += videoType?.textContent
                                    if (videoPlayer) title += ` ${videoPlayer?.textContent}` + " - ";
                                    title += ` ${video?.textContent}`;

                                    group.videos.push({
                                        title: title,
                                        src: video.getAttribute("data-file")
                                    });
                                }

                            }
                        }
                        if(videoPlayers.length === 0) {
                            filterVideos(null);
                        }
                        for (const videoPlayer of videoPlayers) {
                            videoPlayerId = videoPlayer.getAttribute("data-id");
                            if (!videoPlayerId.startsWith(videoTypeId)) continue;
                            filterVideos(videoPlayer);
                        }
                    }

                    if (videoTypes.length === 0) {
                        filterVideoPlayers(null);
                    }
                    for (const videoType of videoTypes) {
                        videoTypeId = videoType.getAttribute("data-id");
                        if (!videoTypeId.startsWith(authorId)) continue;
                        filterVideoPlayers(videoType);
                    }
                }

                filterVideoTypes();


                videoSrc.push(group);
            }
            return videoSrc;
        };

        return getVideoSrc();
    `;

    videosData = executeJsScript({"code": jsCode1});
    print(videosData);
    print(videosData.length);
    if(videosData.isEmpty) {
        print("jsCode1 failed, trying jsCode2");
        videosData = executeJsScript({"code": jsCode2});
    }

    print(videosData);

    videoGroups = [];

    for(i = 0; i < videosData.length; i = i + 1) {
        player = videosData[i];
        videos = [];

        for(j = 0; j < player.videos.length; j = j + 1) {
            video = player["videos"][j];
            videos.push(buildAnimeVideo({
                "uid": video["src"],
                "src": video["src"],
                "title": video["title"],
                "timestamp": null,
                "type": typeIframe(),
                "data": video
            }));
        }

        videoGroups.push(buildAnimeVideoGroup({
                 "title": player.title,
                 "videos": videos,
                 "data": {}
        }));

    }

    return buildConcrete({
        "uid": uid,
        "cover": data["cover"],
        "title": data["title"],
        "alternativeTitles": [],
        "status": statusReleased(),
        "groups": videoGroups,
        "tags": tags,
        "description": description
    });
}

function getImageHeaders(uid) {
    return {};
}

function passProtector(body, headers, cookies) {
    useHeaders({"headers": headers});
}

function passWebBrowserInterceptorController(controller) {
    registerInterceptorController(controller);
}
