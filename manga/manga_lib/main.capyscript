import "http";
import "io";
import "json";
import "date";
import "html";
import "manga_models";
import "converter";


function getGallery(page, query, filters) {

    name = null;

    if(query.isNotEmpty) {
        name = query;
    }

    result = httpPost({
        "url": "https://mangalib.me/api/list",
        "params": {},
        "paths": {},
        "body": jsonEncode({
                   "sort": "rate",
                   "dir": "desc",
                   "page": page,
                   "name": name,
                   "site_id": "1",
                   "caution_list": [
                       "Отсутствует",
                       "16+",
                       "18+"
                   ]
               }),
        "headers": {},
        "throughWeb": false
    });

    decoded = jsonDecode(result["body"]);

    print("Current page: " + parseString(decoded.items.current_page));

    data = decoded.items.data;


    result = [];

    for(i = 0; i < data.length; i = i + 1) {

        item = data[i];

        uid = item["slug"];
        title = item["rus_name"];

        cover = null;

        covers = item["covers"];

        print(covers);

        if(covers["coverImage"] != null) {
            cover = covers["coverImage"];
        } else if(covers["default"] != null) {
            cover = covers["default"];
        }

        result.push(buildGallery({
            "uid": parseString(uid),
            "title": title,
            "cover": cover,
            "data": item
        }));

    }

    return result;

}

function processChapter(chapter, data, branch, uid) {
    chapterName = "";
    chapterNumber = "";
    chapterVolume = 1;

    if(chapter.chapter_name != null) {
        chapterName = chapter.chapter_name;
    }

    if(chapter.chapter_number != null) {
        chapterNumber = chapter.chapter_number;
    }

    if(chapter.chapter_volume != null) {
        chapterVolume = chapter.chapter_volume;
    }


    chapter["slug"] = uid;
    if(data.user != null) {
        chapter["id"] = data.user.id;
    }

    if(branch != null) {
        chapter["bid"] = branch.id;
    }

    return buildChapter({
                       "uid": chapter.chapter_slug,
                       "title": "Том " + parseString(chapterVolume) + " Глава " + chapterNumber  + " " + chapterName,
                       "timestamp": chapter.chapter_created_at,
                       "data": chapter
                   });
}

function getConcrete(uid) {

    result = httpGet({
        "url": "https://mangalib.me/" + uid,
        "params": {},
        "paths": {},
        "headers": {},
        "throughWeb": true
    });

    document = createHTMLParser(result["body"]);

    data = executeJsScript({"code": "return window.__DATA__"});

    chaptersList = data.chapters.list;

    chapterGroups = [];

    branches = data.chapters.branches;
    teams = data.chapters.teams;

    if(branches.isEmpty) {
        chapters = [];

        title = "Default";

        if(teams.isNotEmpty) {
            title = teams.first.name;
        }

        for(i = 0; i < chaptersList.length; i = i + 1) {
            chapter = chaptersList[i];
            chapters.push(processChapter(chapter, data, null, uid));
        }

        chapterGroups.push(buildChapterGroups({
            "title": title,
            "elements": chapters
        }));
    } else {
        for(j = 0; j < teams.length; j = j + 1) {
            team = teams[j];
            branch = null

            for(g = 0; g < branches.length; g = g + 1) {
                branch = branches[g];
                if(branch.id == team.branch_id) {
                    break;
                } else {
                    branch = null;
                }
            }

            chapters = [];

            for(i = 0; i < chaptersList.length; i = i + 1) {
                chapter = chaptersList[i];

                if(chapter.branch_id == team.branch_id) {
                    chapters.push(processChapter(chapter, data, branch, uid));
                }
            }

            chapterGroups.push(buildChapterGroups({
                "title": team.name,
                "elements": chapters
            }));

        }
    }



    description = document.getElementsByClassName("media-description__text")[0].text;

    cover = document.getElementsByClassName("media-sidebar__cover")[0].getElementsByTagName("img")[0].attributes["src"];

    tags = [];

    tagsHtml = document.getElementsByClassName("media-tags")[0].getElementsByTagName("a");

    for(i = 0; i < tagsHtml.length; i = i + 1) {
        tagHtml = tagsHtml[i];
        tags.push(tagHtml.text);
    }

    return buildConcrete({
        "uid": uid,
        "title": data.manga.rusName,
        "description": description,
        "cover": cover,
        "tags": tags,
        "status": null,
        "alternativeTitles": [],
        "groups": chapterGroups
    });
}

function getPages(uid, data) {

    chapter = data;
    chapterName = "";
    chapterNumber = "";
    chapterVolume = 1;

    if(chapter.chapter_name != null) {
        chapterName = chapter.chapter_name;
    }

    if(chapter.chapter_number != null) {
        chapterNumber = chapter.chapter_number;
    }

    if(chapter.chapter_volume != null) {
        chapterVolume = chapter.chapter_volume;
    }

    url = "https://mangalib.me/" + chapter["slug"] + "/v" + parseString(chapterVolume) + "/c" + chapterNumber;

    params = {
        ui: chapter["id"]
    };

    if(chapter["bid"] != null) {
        params["bid"]= chapter["bid"];
    }

    result = httpGet({
        "url": url,
        "params": params,
        "paths": {},
        "headers": {},
        "throughWeb": true
    });

    pages = executeJsScript({"code": "return window.__pg"});

    value = [];

    for(i = 0; i < pages.length; i = i + 1) {
        page = pages[i];
        pageImageUrl = "https://img33.imgslib.link//manga/" + chapter["slug"] + "/chapters/" + chapter.chapter_slug + "/" + page.u;
        value.push(pageImageUrl);
    }

    return buildPages({ "uid": uid,
                        "value": value });

}

function getImageHeaders(uid) {
    headers = getHeaders();

    return {
        "user-agent": headers["user-agent"],
        "Accept": "image/avif,image/webp,*/*",
        "referer": "https://mangalib.me/",
    };
}

function passProtector(body, headers, cookies) {

    result = httpGet({
        "url": "https://mangalib.me/manga-list",
        "params": {},
        "paths": {},
        "headers": {},
        "throughWeb": true
    });


    headers = result["headers"];

    headers["x-xsrf-token"] = result["cookies"]["XSRF-TOKEN"].replaceAll("%3D", "=");
    headers["x-requested-with"] = "XMLHttpRequest";
    headers["Content-Type"] = "application/json;charset=UTF-8";

    document = createHTMLParser(result["body"]);

    metas = document.getElementsByTagName("meta");


    for(i = 0; i < metas.length; i = i + 1) {
       e = metas[i];
       if(e.attributes["name"] == "_token") {
          headers["x-csrf-token"] = e.attributes["content"];
       }
    }

    print("x-csrf-token");
    print(headers["x-csrf-token"]);
    print("x-xsrf-token");
    print(headers["x-xsrf-token"]);
    print("user-agent");
    print(headers["user-agent"]);
    print("cookie");
    print(headers["cookie"]);

    useHeaders({"headers": headers});
}

function passWebBrowserInterceptorController(controller) {
    registerInterceptorController(controller);
}
