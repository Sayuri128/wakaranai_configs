import "http";
import "io";
import "json";
import "date";
import "html";
import "manga_models";
import "converter";

function getCover(coverArtUid, mangaId) {

    cover = "";

    coverResult = httpGet({
        "url": "https://api.mangadex.org/cover/coverArtId",
        "params": {},
        "paths": {
            coverArtId: coverArtUid
        },
        "throughWeb": false,
        "headers": {
            "Content-Type": "application/json"
        }
    });

    decodedCover = jsonDecode(coverResult["body"]);

    coverStatusResult = decodedCover["result"];

    if(coverStatusResult == "ok") {
        fileName = decodedCover["data"]["attributes"]["fileName"];
        cover = "https://mangadex.org/covers/" + mangaId + "/" + fileName;
    }

    return cover;
}

function getCoverId(data) {
    coverArtId = "";
    for(i = 0; i < data.length; i = i + 1) {
        if(data[i]["type"] == "cover_art") {
            coverArtId = data[i]["id"];
        }
    }
    return coverArtId;
}

function handleMangaItem(manga) {
    uid = manga["id"];
    title = manga["attributes"]["title"].values.first;

    cover = getCover({
        "coverArtUid": getCoverId({
            "data": manga["relationships"]
        }),
        "mangaId": uid
    });

    return buildGallery({
        "uid": uid,
        "title": title,
        "cover": cover,
        "data": manga
    });
}

function getGallery(page, query, filters) {

    limit = 20;

    params = {
        "limit": limit,
        "offset": limit * page
    };

    for(i = 0; i < filters.length; i = i + 1) {
        filterData = filters[i];
        filter = filterData["filter"];
        if(filter["type"] == "ONE_OF_MULTIPLE") {
            params[filter.param] = filterData["selected"];
        } else if(filter["type"] == "ONE_OF_ANY") {
            params[filter.param] = filterData["selected"];
        } else if(filter["type"] == "MULTIPLE_OF_ANY") {
            params[filter.param] = filterData["selected"];
        } else if(filter["type"] == "MULTIPLE_OF_MULTIPLE") {
            selected = [];

            for(j = 0; j < filterData["selected"].length; j = j + 1) {
                selected.push(filterData["selected"][j][0]);
            }

            params[filter.param] = selected;
        } else if(filter["type"] == "SWITCHER") {
            on = filterData["on"];
            if(on) {
                params[filter.param] = "AND";
            } else {
                params[filter.param] = "OR";
            }
            
        }
    }

    if(query != "") {
        params["title"] = query;
    }

    result = (httpGet({
        "url": "https://api.mangadex.org/manga",
        "params": params,
        "paths": {},
        "throughWeb": false,
        "headers": {
            "Content-Type": "application/json"
        }
    }));

    print(result);
    decoded = jsonDecode(result["body"]);
    data = decoded["data"];

    mangas = [];

    for(i = 0; i < data.length; i = i + 1) {
        mangas.push(handleMangaItem({
                                "manga": data[i]
                            }));
    }

    return mangas;
}

function getChaptersData(uid, offset) {
    return httpGet({
        "url": "https://api.mangadex.org/manga/:mangaId/feed",
        "params": {
            "limit": 100,
            "offset": offset,
            "translatedLanguage": ["en"],
            "order": {
                "volume": "asc",
                "chapter": "asc"
            }
        },
        "paths": {
            ":mangaId": uid
        },
        "headers": {},
        "throughWeb": false
    });
}

function handleChapterItem(chapter) {
    uid = chapter["id"];

    attr = chapter["attributes"];

    prefix = "";

    if(attr["volume"] != null) {
        prefix = prefix + "Volume " + attr["volume"];
    }
    if(attr["chapter"] != null) {
       prefix = prefix + " Chapter " + attr["chapter"];
    }

    title = chapter["attributes"]["title"];
    if(title == null) {
        title = prefix;
    } else {
        title = prefix + " | " + title;
    }

    rawDate = chapter["attributes"]["publishAt"];

    parser = createDateFormatter("yyyy-MM-dd hh:mm");
    date = parseDate(rawDate);

    timestamp = null;

    if(date != null) {
        timestamp = parser.format(date);
    } else {
        timestamp = rawDate;
    }
    
    print("chapter uid " + uid + " title " + title + " date " + timestamp);


    return buildChapter({
        "uid": uid,
        "title": title,
        "timestamp": timestamp,
        "data": {}
    });
}

function handleChaptersBatch(uid, page, chapters, unique_scanlation_groups) {

    chaptersData = getChaptersData({
        "offset": page * 100,
        "uid": uid
    });
    result = jsonDecode(chaptersData["body"]);
    data = result["data"];
    
    for(i = 0; i < data.length; i = i + 1) {
        if(data[i]["attributes"]["externalUrl"] == null) {
                scanlation_group = data[i]["relationships"][0]["id"];
                if (chapters[scanlation_group] == null) {
                    chapters[scanlation_group] = [];
                    unique_scanlation_groups.push(scanlation_group);
                }
                chapters[scanlation_group].push(handleChapterItem({
                   "chapter": data[i]
                }));
         }
    }
    
    return result;
}

function getChapters(uid)  {

    chapter_groups = [];
    total = 100;

    chapters_loaded = 0
    chapters = {};
    unique_scanlation_groups = [];
    page = 0
    
    for(i = 0; chapters_loaded < total; i = i + 1) {
        res = handleChaptersBatch({
            "uid": uid,
            "page": page,
            "chapters": chapters,
            "unique_scanlation_groups": unique_scanlation_groups
        });
        chapters_loaded = chapters_loaded + res["data"].length;
        page = page + 1;
        total = res["total"];
    }
    
    print("unique scanlation groups");
    print(unique_scanlation_groups);
    
    for (i = 0; i < unique_scanlation_groups.length; i++) {
        key = unique_scanlation_groups[i];
        
        scanlationGroup = httpGet({
            "url": "https://api.mangadex.org/group/:groupId",
            "params": {},
            "paths": {
                ":groupId": key
            },
            "headers": {},
            "throughWeb": false
        });
        print(scanlationGroup);
        jsonScanlation = jsonDecode(scanlationGroup["body"]);
        
        chapter_groups.push(buildChapterGroups({
                                        "title": jsonScanlation["data"]["attributes"]["name"],
                                        "elements": chapters[key],
                                        "data": {}
                                }));
    }

    return chapter_groups;
}

function getPages(uid) {

    result = httpGet({
        "url": "https://api.mangadex.org/at-home/server/chapterUid",
        "params": {},
        "paths": {
            chapterUid: uid
        },
        "throughWeb": false,
        "headers": {
            "Content-Type": "application/json"
        }
    });

    body = jsonDecode(result["body"]);

    if(body["result"] != "ok") {
       return buildPages({
           "uid": uid,
           "value": []
       });
    }

    data = body["chapter"]["data"];

    value = [];

    for(i = 0; i < data.length; i = i + 1) {
        value.push("https://uploads.mangadex.org/data/" + body["chapter"]["hash"] + "/" + data[i]);
    }

    return buildPages({
        "uid": uid,
        "value": value
    });
}

function handleConcreteView(data) {

    title = data["attributes"]["title"].values.first;

    description = data["attributes"]["description"].values.first;

    if(description == null) {
        description = "";
    }

    cover = getCover({
        "coverArtUid": getCoverId({
            "data": data["relationships"]
        }),
        "mangaId": data["id"]
    });

    rawTags = data["attributes"]["tags"];

    tags = [];

    for(i = 0; i < rawTags.length; i = i + 1) {
        tags.push(rawTags[i]["attributes"]["name"].values.first);
    }

    chapters = [];

    return buildConcrete({
        "uid": data["id"],
        "title": title,
        "description": description,
        "cover": cover,
        "tags": tags,
        "status": null,
        "alternativeTitles": [],
        "groups": getChapters({ "uid": data["id"] })
    });
}

function getImageHeaders(uid) {
    return {};
}

function getConcrete(uid) {

    result = httpGet({
        "url": "https://api.mangadex.org/manga/:uid",
        "params": {},
        "paths": {
            ":uid": uid
        },
        "throughWeb": false,
        "headers": {
            "Content-Type": "application/json"
        }
    });

    body = jsonDecode(result["body"]);

    concrete = handleConcreteView({
        "data": body["data"]
    });

    return concrete;
}

