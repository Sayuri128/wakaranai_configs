import "http";
import "io";
import "json";
import "date";
import "html";
import "manga_models";
import "converter";

function getGallery(page, query, filters) {

    params = {
         "site_id": [
             4
         ],
         "sort": "rate",
         "dir": "desc",
         "caution_list": [
            "Отсутствует",
            "16+",
            "18+"
         ]
     };

     if(query.isNotEmpty) {
        params["q"] = query;
     }

     if(page > 1) {
        params["page"] = page;
     }

    result = httpGet({
        "url": "https://api.lib.social/api/manga",
        "params": params,
        "paths": {},
        "headers": {
            "Accept": "application/json"
        },
        "throughWeb": false
    });
    
    serialized = jsonDecode(result["body"]);
    data = serialized["data"];

    result = [];

    for(i = 0; i < data.length; i = i + 1) {
        element = data[i];
        result.push(buildGallery({
            "uid": element["slug_url"],
            "title": element["rus_name"],
            "cover": element["cover"]["default"],
            "data": element
        }));

    }

    return result;

}

function processChapter(chapter, data, uid, team) {
    chapterName = "";
    chapterNumber = "";
    chapterVolume = 1;

    if(chapter.name != null) {
        chapterName = chapter.name;
    }

    if(chapter.number != null) {
        chapterNumber = chapter.number;
    }

    if(chapter.volume != null) {
        chapterVolume = chapter.volume;
    }


    if(data.user != null) {
        chapter["id"] = data.user.id;
    }


    print(chapter);

    return buildChapter({
                       "uid": parseString(chapter.id),
                       "title": "Том " + parseString(chapterVolume) + " Глава " + chapterNumber  + " " + chapterName,
                       "timestamp": chapter.chapter_created_at,
                       "data": {
                        "chapter": parseString(chapterNumber),
                        "volume": parseString(chapterVolume),
                       }
                   });
}

function getConcrete(uid) {

    paths = {};
    paths["?"] = ""
    paths["params"] = `?fields[]=background&fields[]=eng_name&fields[]=otherNames&fields[]=summary&fields[]=releaseDate&fields[]=type_id&fields[]=caution&fields[]=views&fields[]=close_view&fields[]=rate_avg&fields[]=rate&fields[]=genres&fields[]=tags&fields[]=teams&fields[]=franchise&fields[]=authors&fields[]=publisher&fields[]=userRating&fields[]=moderated&fields[]=metadata&fields[]=metadata.count&fields[]=metadata.close_comments&fields[]=manga_status_id&fields[]=chap_count&fields[]=status_id&fields[]=artists&fields[]=format`;

    result = httpGet({
        "url": "https://api.lib.social/api/manga/" + uid + "params",
        "params": {},
        "paths": paths,
        "headers": {
            "Accept": "application/json"
        },
        "throughWeb": false
    });

    serialized = jsonDecode(result["body"]);
    
    data = serialized.data;
    
    cover = data["cover"]["default"];
    title = data["rus_name"];
    description = data["summary"];
    
    tags = [];
   
    for(i = 0; i < data["genres"].length; i = i + 1) {
        tag = data["genres"][i];
        tags.add(tag["name"]);
    }
    for(i = 0; i < data["tags"].length; i = i + 1) {
        tag = data["tags"][i];
        tags.add(tag["name"]);
    }
    alternativeTitles = [
        data["eng_name"]
    ];
    
    for(i = 0; i < data["otherNames"].length; i = i + 1) {
        alternativeTitles.add(data["otherNames"][i]);
    }
    

    result = httpGet({
        "url": "https://api.lib.social/api/manga/" + uid + "/chapters",
        "params": {},
        "paths": {},
        "headers": {
            "Accept": "application/json"
        },
        "throughWeb": false
    });

    serialized = jsonDecode(result["body"]);
    
    data = serialized.data;
    chapterGroups = [];
    
    for(i = 0; i < data.length; i = i + 1) {
        branch = data[i]["branches"][0];
        teams = branch.teams;
        for(j = 0; j < teams.length; j = j + 1) {
            team = teams[j];
            exists = false;
            for(k = 0; k < chapterGroups.length; k = k + 1) {
                chapterGroup = chapterGroups[k];
                if(chapterGroup.title == team.name) {
                    exists = true;
                }
            }

            if(exists == false) {
                chapterGroups.push(buildChapterGroups({
                            "title": team.name,
                            "elements": [],
                            "data": {}
                        }));
            }
        }
    }

    for(i = 0; i < data.length; i = i + 1) {
        chapter = data[i];
        branch = data[i]["branches"][0];
        for(j = 0; j < branch.teams.length; j = j + 1) {
            team = branch.teams[j];
            processedChapter = processChapter(chapter, branch, parseString(branch.id), team);
            processedChapter.data["slug"] = uid;
            
            for(k = 0; k < chapterGroups.length; k = k + 1) {
                chapterGroup = chapterGroups[k];
                if(chapterGroup.title == team.name) {
                    chapterGroup.elements.push(processedChapter);
                }
            }
        }
    }


    return buildConcrete({
        "uid": uid,
        "cover": cover,
        "title": title,
        "description": description,
        "tags": tags,
        "status": null,
        "alternativeTitles": alternativeTitles,
        "groups": chapterGroups
    });
}

function getPages(uid, data) {

    chapter = data;
    chapterName = "";
    chapterNumber = "";
    chapterVolume = 1;

    if(chapter.chapter_name != null) {
        chapterName = chapter.chapter_name;
    }

    if(chapter.chapter != null) {
        chapterNumber = chapter.chapter;
    }

    if(chapter.volume != null) {
        chapterVolume = chapter.volume;
    }

    url = "https://api.lib.social/api/manga/" + chapter["slug"] + "/chapter";

    params = {
        number: chapterNumber,
        volume: chapterVolume
    };

    result = httpGet({
        "url": url,
        "params": params,
        "paths": {},
        "headers": {},
        "throughWeb": false
    });

    deserialized = jsonDecode(result["body"]);

    pages = deserialized["data"]["pages"];

    value = [];

    for(i = 0; i < pages.length; i = i + 1) {
        page = pages[i];
        pageImageUrl = "https://img2.hentaicdn.org" + page["url"];
        value.push(pageImageUrl);
    }

    return buildPages({ "uid": uid,
                        "value": value });

}

function getImageHeaders(uid) {

    headers = getHeaders();

    return {
        "user-agent": headers["user-agent"],
        "Accept": "image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",
        "Referer": "https://hentailib.me/",
    };
}

function passProtector(body, headers, cookies) {

    result = httpGet({
        "url": "https://hentailib.me/manga-list",
        "params": {},
        "paths": {},
        "headers": {},
        "throughWeb": true
    });

    headers = result["headers"];

    headers["x-xsrf-token"] = result["cookies"]["XSRF-TOKEN"].replaceAll("%3D", "=");
    headers["x-requested-with"] = "XMLHttpRequest";
    headers["Content-Type"] = "application/json;charset=UTF-8";

    document = createHTMLParser(result["body"]);

    metas = document.getElementsByTagName("meta");


    for(i = 0; i < metas.length; i = i + 1) {
       e = metas[i];
       if(e.attributes["name"] == "_token") {
          headers["x-csrf-token"] = e.attributes["content"];
       }
    }

    auth = executeJsScript({"code": "return window.localStorage.auth"});
    decoded = jsonDecode(auth);

    headers["Authorization"] = "Bearer " + decoded["token"]["access_token"];

    print("x-csrf-token");
    print(headers["x-csrf-token"]);
    print("x-xsrf-token");
    print(headers["x-xsrf-token"]);
    print("user-agent");
    print(headers["user-agent"]);
    print("cookie");
    print(headers["cookie"]);

    useHeaders({"headers": headers});
}

function passWebBrowserInterceptorController(controller) {
    registerInterceptorController(controller);
}
